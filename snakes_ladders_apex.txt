/*
 * Autor: Kevin Steven Ocampo Morales
 *
 * Fecha: 10/7/2022
 * 
 * Descripción: Archivo con la clase, métodos y variables para implementar en el lenguaje Apex Salesforce con Playground. En este caso, 
 * no quise meterme con el tema de entradas de datos por archivos o consola, así que la lógica seguirá siendo general para cualquier 
 * tamaño de tablero y posiciones de serpientes y escaleras, pero, solo se probara en el main con el caso del documento.
*/

public class snake_ladders {
    public static Map<Integer, Integer> snake = new Map<Integer, Integer>(); //Mapa para las casillas que continen serpientes
    public static Map<Integer, Integer> ladders = new Map<Integer, Integer>(); //Mapa para las casillas que contienen escaleras
    public static Integer value = 0; //Variable que almacena la casilla en la que va
    
    public static Integer throwDice(){
        /*
         * Variables: Ninguna.
         * 
         * Descripción: Función que retorna un valor aleatorio entre 1 y 6 para el dado del juego.
		*/
        Integer randomNumber = Integer.valueof(Math.floor(Math.random() * (6 - 1)) + 1);
        return randomNumber;
    }
    
    public static String genMessage(Integer num){
        /*
         * Variables: num que sera el codigo del mensaje a devolver.
         * 
         * Descripcion: Función que retorna el mensaje a imprimir en consola
		*/
        String ans = '';
        switch on num{
            when 1{
                ans = 'Jugador llego o supero el cuadro';
            }
            when 2{
                ans = 'Jugador avanza a cuadro';
            }
            when 3{
                ans = 'Jugador desciende al cuadro';
            }
            when 4{
                ans = 'Jugador sube por la escalera al cuadro';
            }
            when else{
                ans = 'Codigo invalido.';
            }
        }
        return ans;
    }
    
    public static Map<Integer,String> state(Integer n, Integer val){
        System.assert(n >= 1);
        System.assert(val >= 1);
        /*
         * Variables: n que es el tamaño del tablero
         * 			  val que indica el valor de la casilla a la que me desplazare
         * 
         * Descripcion: Función que permite verificar el estado del juego y saber asi que acción se debe mostrar ne pantalla
		*/
        Map<Integer,String> ans = new Map<Integer,String>();
        
        if (val >= n*n)
            ans.put(n*n,genMessage(1));
        
        else if (snake.containsKey(val)){
            System.debug('Entre snake');
        	System.debug(genMessage(2)+' '+val);
            val = snake.get(val);
            ans.put(val,genMessage(3));
        }
        
        else if (ladders.containsKey(val)){
            System.debug('Entre ladders');
        	System.debug(genMessage(2)+' '+val);
            val = ladders.get(val);
            ans.put(val,genMessage(3));
        }
        
        else
            ans.put(val,genMessage(2));
        
        value = val;
        
        return ans;
    }
    
    public static String game(Integer n){
        System.assert(n >= 1);
        /*
         * Variables: n que ser el tamaño del tablero de juego, quedando un total de n*n casillas.
         * 
         * Descripcion: Función principal de ejecución del juego 'Escaleras y serpientes'.
		*/
        Integer local = 0;
        
        while(local < n*n){
            Integer aux = throwDice();
            System.debug('Dado arroja '+aux);
            local += aux;
            Map<Integer,String> aux2 = state(n,local);
            for(Integer key : aux2.keySet()){
                System.debug(aux2.get(key)+key);
            }
        }
        
        
        return 'Fin';
    }
    
    public static void main(){
        //Datos quemados para poder ejecutar el juego
        snake.put(14,4);
        snake.put(19,8);
        snake.put(22,20);
        snake.put(24,16);
        ladders.put(3,11);
        ladders.put(10,12);
        ladders.put(9,18);
        ladders.put(6,17);
        System.debug(game(5));
    }
}